#ifndef ROAD_H
#define ROAD_H

#include "cars.h"

#define ROAR_PARTS_ROWS       8
#define ROAD_PARTS_COLUMNS    4
#define ROAD_PARTS_BLOCKS     5
#define ROAD_MATERIAL_SIZE    8

PROGMEM const uint8_t roadData[] = {
// road data length
0x24,
// Parts Data x 4 =
// one screen
// (128 x 64)
0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x01,
0x02, 0x02, 0x02, 0x03,
0x00, 0x00, 0x00, 0x04,
0x05, 0x05, 0x05, 0x06,
0x00, 0x00, 0x00, 0x01,
0x03, 0x01, 0x03, 0x04,
0x05, 0x06, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00,
};

PROGMEM const uint8_t roadPartsData[] = {
// 0x00
0x01, 0x01, 0x01, 0x01,
0x10, 0x10, 0x10, 0x10,
0x00, 0x00, 0x00, 0x00,
0x0a, 0x00, 0x0a, 0x00,
0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00,
0x1b, 0x1b, 0x1b, 0x1b,
0x01, 0x01, 0x01, 0x01,
// 0x01
0x01, 0x01, 0x01, 0x01,
0x11, 0x12, 0x13, 0x14,
0x00, 0x00, 0x16, 0x17,
0x00, 0x00, 0x00, 0x00,
0x0d, 0x00, 0x0c, 0x00,
0x00, 0x00, 0x00, 0x00,
0x1a, 0x19, 0x23, 0x22,
0x08, 0x00, 0x20, 0x1f,
// 0x02
0x01, 0x01, 0x01, 0x01,
0x15, 0x15, 0x15, 0x15,
0x18, 0x18, 0x18, 0x18,
0x00, 0x00, 0x00, 0x00,
0x0b, 0x00, 0x0b, 0x00,
0x00, 0x00, 0x00, 0x00,
0x21, 0x21, 0x21, 0x21,
0x1e, 0x1e, 0x1e, 0x1e,
// 0x03
0x01, 0x01, 0x01, 0x01,
0x14, 0x13, 0x12, 0x11,
0x17, 0x16, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00,
0x0c, 0x00, 0x0d, 0x00,
0x00, 0x00, 0x00, 0x00,
0x22, 0x23, 0x19, 0x1a,
0x1f, 0x20, 0x00, 0x08,
// 0x04
0x04, 0x00, 0x15, 0x14,
0x0f, 0x0e, 0x18, 0x17,
0x00, 0x00, 0x00, 0x00,
0x0a, 0x00, 0x0a, 0x00,
0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00,
0x1a, 0x19, 0x23, 0x22,
0x08, 0x00, 0x20, 0x1f,
// 0x05
0x13, 0x13, 0x13, 0x13,
0x16, 0x16, 0x16, 0x16,
0x00, 0x00, 0x00, 0x00,
0x0a, 0x00, 0x0a, 0x00,
0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00,
0x21, 0x21, 0x21, 0x21,
0x1e, 0x1e, 0x1e, 0x1e,
// 0x06
0x14, 0x15, 0x00, 0x05,
0x17, 0x18, 0x0e, 0x0f,
0x00, 0x00, 0x00, 0x00,
0x0a, 0x00, 0x0a, 0x00,
0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00,
0x22, 0x23, 0x19, 0x1a,
0x1f, 0x20, 0x00, 0x09,
// 0x07
0x01, 0x01, 0x01, 0x01,
0x10, 0x10, 0x10, 0x10,
0x00, 0x00, 0x00, 0x00,
0x0a, 0x00, 0x0a, 0x00,
0x00, 0x00, 0x00, 0x00,
0x00, 0x24, 0x00, 0x00,
0x1b, 0x1b, 0x1b, 0x1b,
0x01, 0x01, 0x01, 0x01,
// 0x08
0x01, 0x01, 0x01, 0x01,
0x11, 0x12, 0x13, 0x14,
0x00, 0x00, 0x16, 0x17,
0x00, 0x00, 0x00, 0x00,
0x0d, 0x00, 0x0c, 0x00,
0x00, 0x24, 0x00, 0x00,
0x1a, 0x19, 0x23, 0x22,
0x08, 0x00, 0x20, 0x1f,
// 0x09
0x01, 0x01, 0x01, 0x01,
0x15, 0x15, 0x15, 0x15,
0x18, 0x18, 0x18, 0x18,
0x00, 0x00, 0x00, 0x00,
0x0b, 0x00, 0x0b, 0x00,
0x00, 0x24, 0x00, 0x00,
0x21, 0x21, 0x21, 0x21,
0x1e, 0x1e, 0x1e, 0x1e,
};

PROGMEM const uint8_t roadMaterialData[] = {
// parts
0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44,
// parts (top)
0x11, 0x44, 0x11, 0x44, 0x11, 0x04, 0x01, 0x00,
0x01, 0x04, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44,
0x01, 0x04, 0x01, 0x04, 0x01, 0x04, 0x01, 0x00,
0x01, 0x04, 0x01, 0x04, 0x01, 0x04, 0x01, 0x04,
// parts (bottom)
0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x10, 0x40,
0x00, 0x40, 0x10, 0x44, 0x11, 0x44, 0x11, 0x44,
0x10, 0x40, 0x10, 0x40, 0x10, 0x40, 0x10, 0x40,
0x00, 0x40, 0x10, 0x40, 0x10, 0x40, 0x10, 0x40,
// centerline
0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00,
0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00,
0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00,
0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00,
// side line (top)
0x05, 0x0d, 0x0d, 0x0d, 0x09, 0x01, 0x01, 0x01,
0x0a, 0x1a, 0x1a, 0x1a, 0x12, 0x02, 0x02, 0x02,
0x14, 0x34, 0x34, 0x34, 0x24, 0x04, 0x04, 0x04,
0x28, 0x68, 0x68, 0x68, 0x48, 0x08, 0x08, 0x08,
0x50, 0xd0, 0xd0, 0xd0, 0x90, 0x10, 0x10, 0x10,
0xa0, 0xa0, 0xa0, 0xa0, 0x20, 0x20, 0x20, 0x20,
0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,
0x01, 0x03, 0x03, 0x03, 0x02, 0x00, 0x00, 0x00,
0x02, 0x06, 0x06, 0x06, 0x04, 0x00, 0x00, 0x00,
// side line (bottom)
0xa0, 0xb0, 0xb0, 0xb0, 0x90, 0x80, 0x80, 0x80,
0x50, 0x58, 0x58, 0x58, 0x48, 0x40, 0x40, 0x40,
0x28, 0x2c, 0x2c, 0x2c, 0x24, 0x20, 0x20, 0x20,
0x14, 0x16, 0x16, 0x16, 0x12, 0x10, 0x10, 0x10,
0x0a, 0x0b, 0x0b, 0x0b, 0x09, 0x08, 0x08, 0x08,
0x05, 0x05, 0x05, 0x05, 0x04, 0x04, 0x04, 0x04,
0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00,
0x80, 0xc0, 0xc0, 0xc0, 0x40, 0x00, 0x00, 0x00,
0x40, 0x60, 0x60, 0x60, 0x20, 0x00, 0x00, 0x00,
// rock
0x38, 0x44, 0x82, 0x89, 0x85, 0x81, 0x42, 0x3c,
};

PROGMEM const uint16_t roadMaterialCollisionData[] = {
// 0x0000
//   |||+ height 1-8
//   ||+- width 1-8  
//   |+-- y 0-7
//   +--- x 0-7 + 0b1000 (Slow down flag) 
        0x0088, 0x0088, 0x0088, 0x0083, 0x0083, 0x0088, 0x0088, 
0x0484, 0x0484, 0x0000, 0x0000, 0x0000, 0x0000, 0x8084, 0x8184, 
0x8284, 0x8384, 0x8484, 0x8583, 0x8682, 0x8781, 0x8081, 0x8082, 
0x8083, 0x8484, 0x8384, 0x8284, 0x8184, 0x8084, 0x8083, 0x8082,
0x8081, 0x8781, 0x8682, 0x8583, 0x0088, 0x0088, 0x0088, 0x0088, 
};

struct RoadRect
{
  int x;
  int y;
  uint8_t width;
  uint8_t height;
  boolean isSlowDown;
};

struct Road
{
  public:
  uint8_t pos;
  uint8_t len;
  int16_t cnt;
  uint8_t add_cnt;
  RoadRect rect[64];
  int16_t rect_cnt;

  void set()
  {
    pos = 0;
    len = 0;
    cnt = 0;
    add_cnt = 0;
    rect_cnt = 0;
  }
};

Road road;

void drawRoadParts(int16_t x, int16_t y, uint8_t id)
{
  uint8_t parts_pos = id * 32;

  for (uint8_t row = 0; row < ROAR_PARTS_ROWS; row++)
  {
    for (uint8_t column = 0; column < ROAD_PARTS_COLUMNS; column++)
    {
      uint8_t road_part = pgm_read_byte_near(roadPartsData + parts_pos + (row * ROAD_PARTS_COLUMNS) + column);
      int16_t xx = x + (column * ROAD_MATERIAL_SIZE);
      int16_t yy = y + (row * ROAD_MATERIAL_SIZE);
      if(road_part == 0)
      {
        arduboy.fillRect(xx, yy, ROAD_MATERIAL_SIZE, ROAD_MATERIAL_SIZE, BLACK);
      }
      else
      {
        arduboy.drawBitmap(xx, yy, roadMaterialData + ((road_part - 1) * ROAD_MATERIAL_SIZE)
        , ROAD_MATERIAL_SIZE, ROAD_MATERIAL_SIZE, WHITE);

        if (xx >= 8 && (xx <= (player.x + CAR_WIDTH)) &&
        (pgm_read_word_near(roadMaterialCollisionData + (road_part - 1)) != 0))
        {
          uint16_t c = pgm_read_word_near(roadMaterialCollisionData + (road_part - 1));
          
          uint8_t xy = highByte(c);
          uint8_t wh = lowByte(c);

          road.rect[ road.rect_cnt ] = {
            .x = xx + ((xy >> 4) & 0b00000111), 
            .y = yy + (xy & 0b00001111),
            .width = (wh >> 4),
            .height = (wh & 0b00001111),
            .isSlowDown = bitRead(xy, 7)
          };          

          road.rect_cnt++;          
        }
      }
    }  
  }  
}

bool roadCollide(Rect rect1, RoadRect rect2)
{
  return !( rect2.x                 >=  rect1.x + rect1.width    ||
            rect2.x + rect2.width   <=  rect1.x                ||
            rect2.y                 >=  rect1.y + rect1.height ||
            rect2.y + rect2.height  <=  rect1.y);
}

void drawRoad()
{
  road.cnt = road.cnt + road.add_cnt;
  player.isMoveUp = true;
  player.isMoveDown = true;
  player.isMoveFront = true;
  player.isMoveFrontUp = false;
  player.isMoveFrontDown = false;
  player.isSlowDown = false;
  road.rect_cnt = 0;

  if (road.len == 0)
  {
    road.len = pgm_read_byte_near(roadData);
    road.pos = 1;
  }
   
  for (uint8_t block = 0; block < ROAD_PARTS_BLOCKS; block++)
  {
    drawRoadParts((block * ROAR_PARTS_ROWS * ROAD_PARTS_COLUMNS) - road.cnt, 0,
    pgm_read_byte_near(roadData + road.pos + block));
  }

  if (road.cnt >= ROAR_PARTS_ROWS * ROAD_PARTS_COLUMNS)
  {
    road.cnt = 0;
    road.pos++;
    
    // loop (test only)
    if (road.pos > (road.len - ROAD_PARTS_BLOCKS))
    {
      road.pos = 1;
    }
  }

  for (uint8_t i = 0; i < road.rect_cnt; i++)
  {
    if (roadCollide({.x = player.rect.x, .y = player.rect.y - 1, 
    .width = player.rect.width, .height = player.rect.height }, road.rect[i]))
    {
      player.isMoveUp = false;
      
      if (road.rect[i].isSlowDown)
      {
        player.isSlowDown = true;
      }
    }
    if (roadCollide({.x = player.rect.x, .y = player.rect.y + 1, 
    .width = player.rect.width, .height = player.rect.height }, road.rect[i]))
    {
      player.isMoveDown = false;

      if (road.rect[i].isSlowDown)
      {
        player.isSlowDown = true;
      }
    }
    if (roadCollide({.x = player.rect.x + 4, .y = player.rect.y,
    .width = player.rect.width, .height = player.rect.height }, road.rect[i]))
    {

      if (!roadCollide({.x = player.rect.x + 4, .y = player.rect.y - 1,
      .width = player.rect.width, .height = player.rect.height }, road.rect[i]))
      {
        player.isMoveFrontUp = true;
      }
      else
      if (!roadCollide({.x = player.rect.x + 4, .y = player.rect.y + 1,
      .width = player.rect.width, .height = player.rect.height }, road.rect[i]))
      {
        player.isMoveFrontDown = true;
      }
      
      if (road.rect[i].isSlowDown)
      {
        player.isSlowDown = true;
      }
    }
  }  
}

#endif
